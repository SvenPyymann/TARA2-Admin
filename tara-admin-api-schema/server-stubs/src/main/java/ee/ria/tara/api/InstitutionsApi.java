/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ee.ria.tara.api;

import ee.ria.tara.model.Client;
import ee.ria.tara.model.Institution;
import ee.ria.tara.model.InstitutionMetainfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "institutions", description = "the institutions API")
public interface InstitutionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Add new client for existing institution", nickname = "addClientToInstitution", notes = "", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "clients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/{registry_code}/clients",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addClientToInstitution(@ApiParam(value = "Registry code of the institution",required=true) @PathVariable("registry_code") String registryCode,@ApiParam(value = "Client object that needs to be added" ,required=true )  @Valid @RequestBody Client client) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Add a new institution", nickname = "addInstitution", notes = "", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "institutions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/institutions",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addInstitution(@ApiParam(value = "Institution object that needs to be added" ,required=true )  @Valid @RequestBody Institution institution) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete existing client for given institution", nickname = "deleteClient", notes = "", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "clients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/{registry_code}/clients/{client_id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteClient(@ApiParam(value = "Registry code of the institution",required=true) @PathVariable("registry_code") String registryCode,@ApiParam(value = "OpenID Connect client_id",required=true) @PathVariable("client_id") String clientId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Deletes an existing institution", nickname = "deleteInstitution", notes = "", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "institutions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/{registry_code}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteInstitution(@ApiParam(value = "Registry code of the institution",required=true) @PathVariable("registry_code") String registryCode) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all registered clients for existing institution", nickname = "getAllInstitutionClients", notes = "", response = Client.class, responseContainer = "List", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "clients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Client.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/{registry_code}/clients",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Client>> getAllInstitutionClients(@ApiParam(value = "Registry code of the institution",required=true) @PathVariable("registry_code") String registryCode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"client_url\" : \"https://client.example.com/\",  \"post_logout_redirect_uris\" : [ \"https://logout-redirect-uri.test.ee/callback\", \"https://logout-redirect-uri.test.ee/callback\" ],  \"institution_metainfo\" : {    \"name\" : \"Example Institution\",    \"type\" : {      \"type\" : \"public\"    },    \"registry_code\" : \"12345678\"  },  \"smartid_settings\" : {    \"should_use_additional_verification_code_check\" : true,    \"relying_party_name\" : \"relying_party_name\",    \"relying_party_UUID\" : \"relying_party_UUID\"  },  \"description\" : \"description\",  \"sla_notification_emails\" : [ \"katkestused@test.ee\", \"katkestused@test.ee\" ],  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"redirect_uris\" : [ \"https://redirect-uri.test.ee/callback\", \"https://redirect-uri.test.ee/callback\" ],  \"secret\" : \"secret\",  \"client_id\" : \"openIdDemo\",  \"is_user_consent_required\" : true,  \"mid_settings\" : {    \"relying_party_name\" : \"relying_party_name\",    \"relying_party_UUID\" : \"relying_party_UUID\"  },  \"client_secret_export_settings\" : {    \"recipient_id_code\" : \"60001019906\",    \"recipient_name_in_ldap\" : \"Mari-Liis MÃ¤nnik\",    \"recipient_email\" : \"60001019906@eesti.ee\"  },  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"client_short_name\" : {    \"ru\" : \"ru\",    \"en\" : \"en\",    \"et\" : \"et\"  },  \"scope\" : [ \"scope\", \"scope\" ],  \"client_contacts\" : [ {    \"phone\" : \"+3726630200\",    \"name\" : \"test\",    \"department\" : \"test\",    \"email\" : \"test@example.com\"  }, {    \"phone\" : \"+3726630200\",    \"name\" : \"test\",    \"department\" : \"test\",    \"email\" : \"test@example.com\"  } ],  \"id\" : \"id\",  \"backchannel_logout_uri\" : \"https://example.com/\",  \"client_name\" : {    \"ru\" : \"ru\",    \"en\" : \"en\",    \"et\" : \"et\"  },  \"client_logo\" : \"client_logo\",  \"info_notification_emails\" : [ \"teavitused@test.ee\", \"teavitused@test.ee\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get list of all institutions", nickname = "getAllInstitutions", notes = "", response = Institution.class, responseContainer = "List", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "institutions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Institution.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/institutions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Institution>> getAllInstitutions(@ApiParam(value = "Filters search results by name or registry code") @Valid @RequestParam(value = "filter_by", required = false) String filterBy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"address\" : \"Test st 123\",  \"billing_settings\" : {    \"email\" : \"email\"  },  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"phone\" : \"+3726630200\",  \"name\" : \"Example Institution\",  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"id\",  \"type\" : {    \"type\" : \"public\"  },  \"registry_code\" : \"12345678\",  \"client_ids\" : [ \"openIdDemo\", \"openIdDemo\" ],  \"email\" : \"info@example.com\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get list of existing institutions and their types.", nickname = "getInstitutionMetainfo", notes = "", response = InstitutionMetainfo.class, responseContainer = "List", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "institutions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = InstitutionMetainfo.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/metainfo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<InstitutionMetainfo>> getInstitutionMetainfo() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"Example Institution\",  \"type\" : {    \"type\" : \"public\"  },  \"registry_code\" : \"12345678\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update existing client for existing institution", nickname = "updateClient", notes = "", response = String.class, authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "clients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/{registry_code}/clients/{client_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<String> updateClient(@ApiParam(value = "Registry code of the institution",required=true) @PathVariable("registry_code") String registryCode,@ApiParam(value = "OpenID Connect client_id",required=true) @PathVariable("client_id") String clientId,@ApiParam(value = "Client object that needs to be added" ,required=true )  @Valid @RequestBody Client client) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update an existing institution", nickname = "updateInstitution", notes = "", authorizations = {
        @Authorization(value = "cookieAuth")
    }, tags={ "institutions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/institutions/{registry_code}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateInstitution(@ApiParam(value = "Registry code of the institution",required=true) @PathVariable("registry_code") String registryCode,@ApiParam(value = "Institution object that needs to be updated" ,required=true )  @Valid @RequestBody Institution institution) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
